class Solution:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        count = 0
        for i in range(len(nums)):
            if nums[i] == target:
                count += 1
        if count > len(nums)//2:
            return True
        else:
            return False


from typing import List


import bisect
class Solution_Using_Bisect:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        # Find first occurrence using binary search
        left_index = bisect.bisect_left(nums, target)
        right_index = bisect.bisect_right(nums, target)
        # Number of times target appears
        count = right_index - left_index
        # Return True if count is greater than half of the array size
        return count > len(nums) // 2

from typing import List

class MajorityElementChecker: # generated by chatgpt
    def is_majority_element(self, sorted_array: List[int], target: int) -> bool:
        def find_first_occurrence(value: int) -> int:
            left, right = 0, len(sorted_array) - 1
            while left <= right:
                mid = left + (right - left) // 2
                if sorted_array[mid] < value:
                    left = mid + 1
                else:
                    right = mid - 1
            return left

        first_index = find_first_occurrence(target)
        last_index = find_first_occurrence(target + 1) - 1
        frequency = last_index - first_index + 1

        return frequency > len(sorted_array) // 2
